// RUN: mlir-opt -canonicalize %s | FileCheck %s

// CHECK-LABEL: func @performance8443
func @performance8443() -> i1 {
  // CHECK-NEXT: %[[S:.*]] = constant true
  // CHECK-NEXT: return %[[S]]
  %set = presburger.set #presburger<"(d0, d1, d2, d3, d4, d5, d6, d7, d8)[] : (-d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d3 + -1 = 0 and d2 + -1 = 0 and d0  >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and d0 + -d4 + -1 >= 0 and -d0 + d7 + -1 >= 0 and -d7 + 2799 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d0 + d4 + -1 >= 0 and -d0 + d7 + -1 >= 0 and -d7 + 2799 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and d0 + -d4 + -1 >= 0 and d7  >= 0 and d0 + -d7 + -1 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d3 + 1 = 0 and d2 + -1 = 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d0 + d4 + -1 >= 0 and d7  >= 0 and d0 + -d7 + -1 >= 0  or -d1 + d8  = 0 and d7  = 0 and d6  = 0 and d2 + -1 = 0 and d0  = 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d3 + -1 >= 0  or -d1 + d8  = 0 and d7  = 0 and d6  = 0 and d2  = 0 and d0  = 0 and d1  >= 0 and -d1 + 2799 >= 0 and d3 + -1 >= 0  or -d1 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and d0 + -d4 + -1 >= 0  or -d1 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d3 + 1 = 0 and d2 + -1 = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d0 + d4 + -1 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3 + -1 = 0 and d2 + -1 = 0 and d0  >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and d1 + -d5  >= 0 and -d0 + d7 + -1 >= 0 and -d7 + 2799 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d1 + d5 + -1 >= 0 and -d0 + d7 + -1 >= 0 and -d7 + 2799 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and d1 + -d5  >= 0 and d7  >= 0 and d0 + -d7 + -1 >= 0  or -d1 + d8  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3 + 1 = 0 and d2 + -1 = 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d1 + d5 + -1 >= 0 and d7  >= 0 and d0 + -d7 + -1 >= 0  or d8  = 0 and d7  = 0 and d6  = 0 and d2 + -1 = 0 and d1  = 0 and d0  = 0 and -d3 + -1 >= 0  or d8  = 0 and d7  = 0 and d6  = 0 and d2  = 0 and d1  = 0 and d0  = 0 and d3 + -1 >= 0  or -d0 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and -d0 + d1  = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and d0 + -d4 + -1 >= 0  or -d0 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d3 + 1 = 0 and d2 + -1 = 0 and -d0 + d1  = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and -d0 + d4 + -1 >= 0  or -d1 + d8  = 0 and d7  = 0 and d6  = 0 and d3  = 0 and d2 + -1 = 0 and d0  = 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d4 + -1 >= 0  or -d1 + d8  = 0 and d7  = 0 and d6  = 0 and d3  = 0 and d2  = 0 and d0  = 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d1 + d4 + -1 >= 0  or -d1 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and d1 + -d5  >= 0  or -d1 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3 + 1 = 0 and d2 + -1 = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and d1  >= 0 and -d1 + 2799 >= 0 and -d1 + d5 + -1 >= 0  or d8  = 0 and d7  = 0 and d6  = 0 and d3  = 0 and d2 + -1 = 0 and d1  = 0 and d0  = 0 and -d4 + -1 >= 0  or -d0 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and -d0 + d1  = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and d0 + -d5  >= 0  or -d0 + d8  = 0 and -d0 + d7  = 0 and -d0 + d6  = 0 and -d0 + d4  = 0 and -d0 + d3 + 1 = 0 and d2 + -1 = 0 and -d0 + d1  = 0 and d0 + -1 >= 0 and -d0 + 2799 >= 0 and -d0 + d5 + -1 >= 0  or -d1 + d8  = 0 and d7  = 0 and d6  = 0 and -d1 + d4  = 0 and d3  = 0 and d2  = 0 and d0  = 0 and d1  >= 0 and -d1 + 2799 >= 0 and d5 + -1 >= 0  or -d1 + d8  = 0 and d7  = 0 and d6  = 0 and d4  = 0 and d3  = 0 and d2 + -1 = 0 and d0  = 0 and d1  >= 0 and -d1 + 2799 >= 0 and d1 + -d5  >= 0  or d8  = 0 and d7  = 0 and d6  = 0 and d4  = 0 and d3  = 0 and d2 + -1 = 0 and d1  = 0 and d0  = 0 and -d5  >= 0  or d8  = 0 and d7  = 0 and d6  = 0 and d4  = 0 and d3  = 0 and d2  = 0 and d1  = 0 and d0  = 0 and d5 + -1 >= 0  or d8  = 0 and d7  = 0 and d6  = 0 and d3  = 0 and d2  = 0 and d1  = 0 and d0  = 0 and d4 + -1 >= 0 )">

  %r = presburger.coalesce %set : !presburger.set<9,0>
  %e = presburger.equal %set, %r : !presburger.set<9,0>, !presburger.set<9,0>
  return %e : i1
}

// ----
