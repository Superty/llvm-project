// RUN: mlir-opt -canonicalize %s | FileCheck %s

// CHECK-LABEL: func @performance8267
func @performance8267() -> i1 {
  // CHECK-NEXT: %[[S:.*]] = constant true
  // CHECK-NEXT: return %[[S]]
  %set = presburger.set #presburger<"(d0, d1, d2, d3, d4, d5, d6)[p0, p1, p2] : (p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and -d1  + -2 >= 0  or p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  + -1 >= 0 and p0 -d1  + -1 >= 0 and -d2  + -1 >= 0  or p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -2 >= 0 and -p1 d2  >= 0  or d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  + -1 >= 0 and p1 -d2  + -1 >= 0 and -d3  + -1 >= 0  or d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -2 >= 0 and d3  + -2 >= 0  or d1  + 1 = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0  or d1  = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and -d2  + -2 >= 0  or d2  = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  + -1 >= 0 and p0 -d1  + -1 >= 0 and -d3  + -1 >= 0  or -p1 d2  + 1 = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -2 >= 0 and d3  + -2 >= 0  or d3  + -1 = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -2 >= 0 and -d0 + d4  + -1 >= 0  or d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  + -1 >= 0 and p1 -d2  + -1 >= 0 and d0 + -d4  + -1 >= 0  or d2  + 1 = 0 and d1  = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0  or d2  = 0 and d1  = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and -d3  + -1 >= 0  or d3  + -1 = 0 and -p1 d2  + 1 = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -2 >= 0 and -d0 + d4  + -1 >= 0  or d3  = 0 and d2  = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  + -1 >= 0 and p0 -d1  + -1 >= 0 and d0 + -d4  + -1 >= 0  or -d0 + d4  = 0 and d3  + -1 = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -2 >= 0 and d5  + -1 >= 0  or -d0 + d4  = 0 and d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  + -1 >= 0 and p1 -d2  + -1 >= 0 and -d5  + -1 >= 0  or d3  = 0 and d2  = 0 and d1  = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d0 + -d4  + -1 >= 0  or d5  + -1 = 0 and -d0 + d4  = 0 and d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -1 >= 0  or -d0 + d4  = 0 and d3  + -1 = 0 and -p1 d2  + 1 = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -2 >= 0 and d5  + -1 >= 0  or -d0 + d4  = 0 and d3  = 0 and d2  = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  + -1 >= 0 and p0 -d1  + -1 >= 0 and -d5  + -1 >= 0  or d5  + -2 = 0 and -d0 + d4  = 0 and d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -1 >= 0 and -d6  + -1 >= 0  or d5  = 0 and -d0 + d4  = 0 and d3  + -1 = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -2 >= 0 and d6  + -1 >= 0  or d5  + -2 = 0 and -d0 + d4  = 0 and d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -1 >= 0 and d6  >= 0 and p2 -d6  + -1 >= 0  or -d0 + d4  = 0 and d3  = 0 and d2  = 0 and d1  = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and -d5  + -1 >= 0  or d5  = 0 and -d0 + d4  = 0 and d3  + -1 = 0 and -p1 d2  + 1 = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -2 >= 0 and d6  + -1 >= 0  or d5  = 0 and -d0 + d4  = 0 and d3  = 0 and d2  = 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  + -1 >= 0 and p0 -d1  + -1 >= 0 and -d6  >= 0  or d5  = 0 and -d0 + d4  = 0 and d3  = 0 and d2  = 0 and d1  = 0 and p + -1 >= 0 and p + -1 >= 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and -d6  >= 0  or d5  = 0 and -d0 + d4  = 0 and d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  + -1 >= 0 and p1 -d2  + -1 >= 0 and -d6  >= 0  or d5  = 0 and -d0 + d4  = 0 and d3  = 0 and d0  >= 0 and p2 -d0  + -1 >= 0 and d1  >= 0 and p0 -d1  + -1 >= 0 and d2  >= 0 and p1 -d2  + -1 >= 0 and d6  + -1 >= 0 )">

  %r = presburger.coalesce %set : !presburger.set<7,3>
  %e = presburger.equal %set, %r : !presburger.set<7,3>, !presburger.set<7,3>
  return %e : i1
}

// ----
