// RUN: mlir-opt -canonicalize %s | FileCheck %s

// CHECK-LABEL: func @performance8330
func @performance8330() -> i1 {
  // CHECK-NEXT: %[[S:.*]] = constant true
  // CHECK-NEXT: return %[[S]]
  %set = presburger.set #presburger<"(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12)[] : (-d0 + d12  = 0 and -d1 + d11  = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and d2 + -2 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0  or -d0 + d12  = 0 and -d1 + d11  = 0 and d2 + -1 = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and -d0 + d3 + -1 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0  or -d0 + d12  = 0 and -d1 + d11  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and -d1 + d4 + -1 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0  or -d0 + d12  = 0 and -d1 + d11  = 0 and -d1 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and d5 + -1 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0  or -d0 + d12  = 0 and -d1 + d11  = 0 and d5  = 0 and -d1 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and d6 + -1 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0  or -d0 + d12  = 0 and -d1 + d11  = 0 and d6  = 0 and d5  = 0 and -d1 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and d7 + -1 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0  or -d0 + d12  = 0 and -d1 + d11  = 0 and d7  = 0 and d6  = 0 and d5  = 0 and -d1 + d4  = 0 and -d0 + d3  = 0 and d2 + -1 = 0 and d0  >= 0 and -d0 + 159 >= 0 and d1  >= 0 and -d1 + 159 >= 0 and d8 + -1 >= 0 and d9  >= 0 and -d9 + 149 >= 0 and d10  >= 0 and -d10 + 139 >= 0 )">

  %r = presburger.coalesce %set : !presburger.set<13,0>
  %e = presburger.equal %set, %r : !presburger.set<13,0>, !presburger.set<13,0>
  return %e : i1
}

// ----
